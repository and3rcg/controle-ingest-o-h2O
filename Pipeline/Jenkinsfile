pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('token-dockerhub') // ID das credenciais do Docker Hub no Jenkins
        GITHUB_CREDENTIALS = credentials('github-token') // ID das credenciais do GitHub no Jenkins
        REPO = 'arimateiajuniorunifor/controle-ingest-o-h2O' // Nome do seu repositório no GitHub, sem a URL completa
        DOCKERHUB_REPO = 'arimateiajunior/controle-h2o' // Nome do seu repositório no Docker Hub
        TAG = "backend-v${env.BUILD_NUMBER}" // Tag baseada no número do build do Jenkins
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', credentialsId: env.GITHUB_CREDENTIALS, url: "https://github.com/${env.REPO}.git"
            }
        }

        stage('Build Docker Images') {
            steps {
                sh 'docker-compose build'
            }
        }

         stage('Verify Docker Images') {
            steps {
                sh 'docker images'
            }
        }

        stage('Tag and Push to Docker Hub') {
            steps {
                script {
                    def service = 'pipeline-h2o_backend'
                    def imageName = "${service}:latest"
                    def dockerHubTag = "${env.DOCKERHUB_REPO}:${env.TAG}"
                    
                    // Verificar se a imagem existe antes de tentar taguear
                    sh "docker inspect --type=image ${imageName} || exit 1"
                    
                    // Login no Docker Hub
                    sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                    
                    sh "docker tag ${imageName} ${dockerHubTag}"
                    sh "docker push ${dockerHubTag}"
                }
            }
        }

       stage('Test Backend') {
            steps {
                // Ativar o ambiente virtual h2o
                sh 'source /var/lib/jenkins/workspace/Pipeline\ -\ H2O/backend/h2o/bin/activate'
                
                // Instalar dependências
                sh 'pip install -r /var/lib/jenkins/workspace/Pipeline - H2O/backend/requirements.txt'
                
                // Executar os testes usando pytest no ambiente virtual
                dir('/var/lib/jenkins/workspace/Pipeline - H2O/backend/tests') {
                    sh 'pytest'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                sh 'docker-compose up -d'
            }
        }
    }

    post {
        always {
            sh 'docker-compose down'
        }
        success {
            echo 'Pipeline executado com sucesso!'
        }
        failure {
            echo 'Pipeline falhou.'
        }
    }
}
