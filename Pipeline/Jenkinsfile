pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('token-dockerhub') // ID das credenciais do Docker Hub no Jenkins
        GITHUB_CREDENTIALS = credentials('github-token') // ID das credenciais do GitHub no Jenkins
        REPO = 'arimateiajuniorunifor/controle-ingest-o-h2O' // Nome do seu repositório no GitHub, sem a URL completa
        DOCKERHUB_REPO = 'arimateiajunior/controle-h2o' // Nome do seu repositório no Docker Hub
        TAG = "v${env.BUILD_NUMBER}" // Tag baseada no número do build do Jenkins
        VENV_PATH = '/var/lib/jenkins/workspace/Pipeline - H2O/backend/h2o'
        PROJECT_PATH = '/var/lib/jenkins/workspace/Pipeline - H2O/backend'
        RECIPIENTS = 'arimateiajunior.tic@gmail.com' // Adicione aqui os e-mails dos destinatários
        SLACK_CHANNEL = '#projeto-controleh2o' // Canal ou usuário do Slack para enviar a mensagem
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', credentialsId: env.GITHUB_CREDENTIALS, url: "https://github.com/${env.REPO}.git"
            }
        }

        stage('Build Docker Images') {
            steps {
                sh 'docker-compose build'
            }
        }

        stage('Verify Docker Images') {
            steps {
                sh 'docker images'
            }
        }

        stage('Tag and Push to Docker Hub') {
            steps {
                script {
                    def services = [
                        'pipeline-h2o_backend',
                        'pipeline-h2o_frontend',
                        'pipeline-h2o_prometheus',
                        'pipeline-h2o_grafana'
                    ]

                    // Loop para tag e push de cada serviço
                    services.each { service ->
                        def imageName = "${service}:latest"
                        def dockerHubTag = "${DOCKERHUB_REPO}/${service}:${TAG}"
                        
                        // Verificar se a imagem existe antes de tentar taguear
                        sh "docker inspect --type=image ${imageName} || exit 1"
                        
                        // Login no Docker Hub
                        sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                        
                        sh "docker tag ${imageName} ${dockerHubTag}"
                        sh "docker push ${dockerHubRepo}/${service}:${TAG}"
                    }
                }
            }
        }

        stage('Test Backend') {
            steps {
                // Executar comandos no subshell para ativar o ambiente virtual e executar os testes
                script {
                    sh """
                    . '${VENV_PATH}/bin/activate'
                    pip install -r '${PROJECT_PATH}/requirements.txt'
                    pytest -v '${PROJECT_PATH}/tests'
                    """
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                sh 'docker-compose up -d'
            }
        }
    }

    post {
        success {
            script {
                // Enviar e-mail
                emailext (
                    subject: "Sucesso: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                    body: "O pipeline foi executado com sucesso.\nVer detalhes no Jenkins: ${env.BUILD_URL}",
                    to: "${env.RECIPIENTS}"
                )

                // Enviar mensagem para o Slack
                slackSend(channel: "${env.SLACK_CHANNEL}", color: 'good', message: "Pipeline executado com sucesso! Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]. Detalhes: ${env.BUILD_URL}")           
            }
        }
        failure {
            script {
                // Enviar e-mail
                emailext (
                    subject: "Falha: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                    body: "O pipeline falhou.\nVer detalhes no Jenkins: ${env.BUILD_URL}",
                    to: "${env.RECIPIENTS}"
                )

                // Enviar mensagem para o Slack
                slackSend(channel: "${env.SLACK_CHANNEL}", color: 'good', message: "Pipeline falhou! Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]. Detalhes: ${env.BUILD_URL}")           
            }
        }
    }
}
